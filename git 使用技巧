 重置为服务器端
git fetch --all
git reset --hard origin/master

创建 提交有关远程的
…or create a new repository on the command line
echo "# VScode-TypeScript" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/tianmaoyu/VScode-TypeScript.git
git push -u origin master


创建 提交有关远程的
…or push an existing repository from the command line
git remote add origin https://github.com/tianmaoyu/VScode-TypeScript.git
git push -u origin master


$ git push -u origin master 上面命令将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了。

对于 查看一个 文件的修改记录  git log -p  fileName 

git -rm -f -r filename, 删除文件，当igore 无效，因为已经开始跟踪
git push -f 强制覆盖（使用本地的)
git revert -n id  (使用 id copy 一份 并 header 并指向它) 回退使用

## 当git 过于庞大时会遇到的问题
$ git clone --depth 1 https://github.com/dogescript/xxxxxxx.git
$ git remote set-branches origin 'remote_branch_name'
$ git fetch --depth 1 origin remote_branch_name
$ git checkout remote_branch_name
————————————————


# 修改本地配置 git config --local -e      //编辑本地git配置 使用 ssh or https

# 设置ss
git config --global http.proxy 'socks5://127.0.0.1:1080'

git config --global https.proxy 'socks5://127.0.0.1:1080'

# 设置代理
git config --global https.proxy http://127.0.0.1:1080

git config --global https.proxy https://127.0.0.1:1080

# 取消代理
git config --global --unset http.proxy

git config --global --unset https.proxy


## 当 git 过于庞大时 
$ git clone --depth 1 https://github.com/dogescript/xxxxxxx.git
$ git remote set-branches origin 'remote_branch_name'
$ git fetch --depth 1 origin remote_branch_name
$ git checkout remote_branch_name


